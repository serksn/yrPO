# -*- coding: utf-8 -*-
"""lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EbmPdkib8SZYYnv7gBLtOlPJ-G4nKHXV
"""

#pip install --upgrade gspread

#pip install schedule

#pip install telebot

import telebot
from datetime import date
from datetime import datetime
from telebot import types
import time
import threading
import schedule
import gspread
from dateutil.relativedelta import relativedelta
token="6604001463:AAFxz5ubGfdLRQUDwI4MigVWQ2w-MFfLyDA"
bot=telebot.TeleBot(token)

#sa = gspread.service_account(filename="service_account.json")

from gspread import authorize
from oauth2client.service_account import ServiceAccountCredentials
scopes = ["https://spreadsheets.google.com/feeds",
                  "https://www.googleapis.com/auth/spreadsheets",
                  "https://www.googleapis.com/auth/drive",
                  "https://www.googleapis.com/auth/drive"]
cred = ServiceAccountCredentials.from_json_keyfile_name("service_account.json", scopes)
sa = authorize(cred)

sh = sa.open("yrpolab1")
wks = sh.worksheet("user_info")
headers = wks.row_values(1)

def days_between(d1, d2):
    return (d1 - d2).days

def draw_manager_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("Отправить рассылку")
    btn2 = types.KeyboardButton("Показать сводку")
    markup.add(btn1, btn2)
    return markup

def draw_user_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("Узнать срок оплаты")
    markup.add(btn1)
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    #475776058
    if message.from_user.id == (475776058):
        markup=draw_manager_menu()
        bot.send_message(message.chat.id, text="Привет, {0.first_name}! Я твой личный ассистент".format(message.from_user), reply_markup=markup)
    else:
        markup=draw_user_menu()
        bot.send_message(message.chat.id, text="Привет, {0.first_name}! Я бот, который напоминает об оплате нашего сервиса".format(message.from_user), reply_markup=markup)

day_token = lambda day_to: (
        (day_to in range(5, 20)) and 'дней' or
        (1 in (day_to, (diglast := day_to % 10))) and 'день' or
        ({day_to, diglast} & {2, 3, 4}) and 'дня' or 'дней')

def SendMsg(send=False):
    dataBase = wks.get_all_records()
    for user in dataBase:
        dataOfUser=str(user['data_last_pay'])
        dataOfUser=datetime.strptime(dataOfUser, '%d.%m.%Y') + relativedelta(months=+1)
        today=datetime.strptime(str(date.today()), '%Y-%m-%d')
        betwens=days_between(dataOfUser,today)
        payment_sum=user['payment_amount']
        if ((betwens == 30 or (betwens<=15 and betwens>0 and betwens%2==1)) or send):
            if (user['active/noactive'] == 'active'): bot.send_message(user['id_telegram'],f'Через {betwens} {day_token(betwens)} вам необходимо оплатить наш сервис на сумму: {payment_sum}')
            else: continue
        elif betwens>30:
            bot.send_message(user['id_telegram'],'В скором времени вас отключат от хостинга')
            rowToUpdate = wks.find(str(user['id_telegram'])).row
            colToUpdate = headers.index('active/noactive')+1
            cellToUpdate = wks.cell(rowToUpdate, colToUpdate)
            cellToUpdate.value = 'noactive'
            wks.update_cells([cellToUpdate])



def GetInfo(admin):
    dataBase = wks.get_all_records()
    dataBase.sort(key=lambda k : k['data_last_pay'])
    for user in dataBase:
        dataOfUser=str(user['data_last_pay'])
        dataOfUser=datetime.strptime(dataOfUser, '%d.%m.%Y') + relativedelta(months=+1)
        today=datetime.strptime(str(date.today()), '%Y-%m-%d')
        betwens=days_between(dataOfUser,today)
        user_name=user['id_user']
        payment_sum=user['payment_amount']
        phone=user['phone_number']
        if betwens<=15 and betwens>0:
            bot.send_message(admin,f'У пользователя {user_name} срок договора истекает через {betwens} {day_token(betwens)}\nСумма оплаты: {payment_sum}\nНомер телефона пользователя {phone}')

def GetMsg(user_id):
    user=wks.row_values(wks.find(str(user_id)).row)
    dataOfUser=str(user[3])
    dataOfUser=datetime.strptime(dataOfUser, '%d.%m.%Y') + relativedelta(months=+1)
    today=datetime.strptime(str(date.today()), '%Y-%m-%d')
    betwens=days_between(dataOfUser,today)
    payment_sum=user[4]
    bot.send_message(user_id,f'Через {betwens} {day_token(betwens)} вам необходимо оплатить наш сервис на сумму: {payment_sum}')

@bot.message_handler(content_types=['text'])
def mailing(message):
    if (message.text == "Отправить рассылку"):
        SendMsg(send=True)
    elif (message.text == "Узнать срок оплаты"):
        GetMsg(message.from_user.id)
    elif (message.text == "Показать сводку"):
        GetInfo(message.from_user.id)
    else:
        bot.send_message(message.from_user.id,'Неизвестная комманда, попробуйте ещё раз.')

#bot.polling(none_stop=True)

def start_polling():
    bot.infinity_polling(none_stop=True)
polling_thread = threading.Thread(target=start_polling)
polling_thread.start()

schedule.every().day.at("23:54").do(SendMsg)

try:
    while True:
        schedule.run_pending()
        time.sleep(1)
except:
    pass